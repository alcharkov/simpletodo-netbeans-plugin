/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.alcharkov.simpletodo;

import javax.swing.DefaultListModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.alcharkov.simpletodo//SimpleTodo//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "SimpleTodoTopComponent",
        iconBase = "org/alcharkov/simpletodo/icon24.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "commonpalette", openAtStartup = false)
@ActionID(category = "Window", id = "org.alcharkov.simpletodo.SimpleTodoTopComponent")
@ActionReference(path = "Toolbars/*", position = 10000)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_SimpleTodoAction",
        preferredID = "SimpleTodoTopComponent"
)
@Messages({
    "CTL_SimpleTodoAction=SimpleTodo",
    "CTL_SimpleTodoTopComponent=SimpleTodo Window",
    "HINT_SimpleTodoTopComponent=This is a SimpleTodo window"
})
public final class SimpleTodoTopComponent extends TopComponent {
    
    private final static String TODO_ELEMENT_SEPARATOR = ";;;;todo_element_separator;;;;";

    public SimpleTodoTopComponent() {

        initComponents();
        setName(Bundle.CTL_SimpleTodoTopComponent());
        setToolTipText(Bundle.HINT_SimpleTodoTopComponent());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPaneElement = new javax.swing.JScrollPane();
        jListElement = new javax.swing.JList<>();
        jTextFieldElement = new javax.swing.JTextField();
        jButtonRemoveAllElements = new javax.swing.JButton();
        jButtonAddElement = new javax.swing.JButton();

        jListElement.setModel(new DefaultListModel<String>()
        );
        jListElement.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListElement.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListElementMouseClicked(evt);
            }
        });
        jScrollPaneElement.setViewportView(jListElement);

        jTextFieldElement.setText(org.openide.util.NbBundle.getMessage(SimpleTodoTopComponent.class, "SimpleTodoTopComponent.jTextFieldElement.text")); // NOI18N
        jTextFieldElement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldElementActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButtonRemoveAllElements, org.openide.util.NbBundle.getMessage(SimpleTodoTopComponent.class, "SimpleTodoTopComponent.jButtonRemoveAllElements.text")); // NOI18N
        jButtonRemoveAllElements.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveAllElementsActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButtonAddElement, org.openide.util.NbBundle.getMessage(SimpleTodoTopComponent.class, "SimpleTodoTopComponent.jButtonAddElement.text")); // NOI18N
        jButtonAddElement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddElementActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneElement, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldElement)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAddElement)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonRemoveAllElements)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldElement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddElement)
                    .addComponent(jButtonRemoveAllElements))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneElement, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRemoveAllElementsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveAllElementsActionPerformed
        WindowAction windowAction = new WindowActionsImpl();
        windowAction.removeAllElements(jListElement);
    }//GEN-LAST:event_jButtonRemoveAllElementsActionPerformed

    private void jTextFieldElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldElementActionPerformed
        WindowAction windowAction = new WindowActionsImpl();
        windowAction.addElement(jListElement, jTextFieldElement);
    }//GEN-LAST:event_jTextFieldElementActionPerformed

    private void jButtonAddElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddElementActionPerformed
        WindowAction windowAction = new WindowActionsImpl();
        windowAction.addElement(jListElement, jTextFieldElement);
    }//GEN-LAST:event_jButtonAddElementActionPerformed

    private void jListElementMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListElementMouseClicked
        ElementManipulation elementManipulation = new ElementManipulationImpl();
        elementManipulation.strikeElement(jListElement, jTextFieldElement);
    }//GEN-LAST:event_jListElementMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddElement;
    private javax.swing.JButton jButtonRemoveAllElements;
    private javax.swing.JList<String> jListElement;
    private javax.swing.JScrollPane jScrollPaneElement;
    private javax.swing.JTextField jTextFieldElement;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        DefaultListModel<String> model = (DefaultListModel<String>) jListElement.getModel();
        StringBuilder sb = new StringBuilder();
        int start = 0;
        if (model != null) {
            for (Object element : model.toArray()) {
                //That's so fucking ugly. I'm lazy to fix it anyway. Who cares :)
                sb.append(TODO_ELEMENT_SEPARATOR).append(element).append(TODO_ELEMENT_SEPARATOR);
            }
            p.setProperty("todo_list", sb.toString());
        } else {
            p.setProperty("todo_list", "");
        }
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        String savedElements = p.getProperty("todo_list");
        if (savedElements != null && !savedElements.isEmpty()) {
            DefaultListModel<String> model = (DefaultListModel<String>) jListElement.getModel();
            model.clear();
            for (String element : savedElements.split(TODO_ELEMENT_SEPARATOR)) {
                model.addElement(element);
            }
            jListElement.setModel(model);
        }
    }

}
